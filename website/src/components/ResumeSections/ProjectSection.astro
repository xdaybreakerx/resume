---
import Section from '../Section.astro'
import ProjectCard from '../ProjectCard.astro'

interface Project {
	heading: string
	tech: string[]
	description: string[]
	href: string
}

const projects: Project[] = [
	{
		heading: "AWS - Cloud-Hosted Digital Resume",
		tech: ["Astro.js", "AWS S3", "AWS CloudFront", "AWS Lambda", "AWS DynamoDB", "Terraform"],
		description: [
			"Developed a serverless, cloud-hosted digital resume using Astro, leveraging AWS services for deployment and scalability.",
			
			"Automated infrastructure provisioning with Terraform, managing S3 for static hosting, CloudFront for distribution, and Lambda for visitor tracking API. Automated deployment with GitHub Actions",
			
			"Implemented DynamoDB for tracking visitor metrics, with Cloudflare handling DNS and security configurations."
		],
		href: "https://github.com/xdaybreakerx/resume"
    },
	{
		heading: 'SmallChop URL Shortener',
		tech: ['Golang', 'HTMX', 'Redis', 'MongoDB', 'Caddy', 'Docker', 'DigitalOcean'],
		description: [
			'Built in Go with Dockerized microservices (Redis, MongoDB, Caddy, Go Server) for fast, high-traffic URL shortening.',

			'Achieved an average of 18,931 requests per second with 4.88 ms average latency, handling large volumes of data at 23.72 MB/sec throughput per wrk.',

			'GitHub Actions pipeline for continuous integration and deployment.'
		],
		href: 'https://github.com/xdaybreakerx/SmallChop'
	},
	{
		heading: 'Aftermath Archive - Incident Response and Post-Mortem Tracker',
		tech: ['MongoDB', 'Express.js', 'React', 'Node.js', 'Docker'],
		description: [
			'Developed a post-mortem documentation platform to track incidents, analyze root causes, and improve operational resilience.',

			'Supports structured reporting, real-time collaboration, and categorization of incidents to streamline post-incident analysis.',

			'Designed with a modular MERN stack architecture, featuring a robust backend API for structured data storage and a responsive, accessible front-end UI.'
		],
		href: 'https://github.com/Aftermath-Archive'
	},
	{
		heading: 'Finance Management API',
		tech: ['Python', 'Flask', 'JWT', 'PostgreSQL'],
		description: [
			'Built a Flask-based API for secure CRUD operations, managing user accounts, transactions, and categorising expenses.',

			'Integrated PostgreSQL via Neon.tech for scalability and optimised database performance.',

			'Security focus with JWT-based authentication, input sanitisation, and error handling.'
		],
		href: 'https://github.com/xdaybreakerx/finance-management-api'
	},
]
---

<Section title='Projects'>
	{
		projects.map((project) => (
			<ProjectCard
				as='a'
				href={project.href}
				key={project.href}
				heading={project.heading}
				description={project.description}
				tech={project.tech}
			/>
		))
	}
</Section>
