---
import Section from '../Section.astro'
import ProjectCard from '../ProjectCard.astro'

interface Project {
	heading: string
	tech: string[]
	description: string[]
	href: string
}

const projects: Project[] = [
	{
		heading: 'Aftermath Archive - Incident Response and Post-Mortem Tracker',
		tech: ['MongoDB', 'Express.js', 'React', 'Node.js', 'Docker'],
		description: [
			'Developed a post-mortem documentation platform to track incidents, analyze root causes, and improve operational resilience.',

			'Supports structured reporting, real-time collaboration, and categorization of incidents to streamline post-incident analysis.',

			'Designed with a modular MERN stack architecture, featuring a robust backend API for structured data storage and a responsive, accessible front-end UI.'
		],
		href: 'https://github.com/Aftermath-Archive'
	},
	{
		heading: 'SmallChop URL Shortener',
		tech: ['Golang', 'HTMX', 'Redis', 'MongoDB', 'Caddy', 'Docker', 'DigitalOcean'],
		description: [
			'Built in Go with Dockerized microservices (Redis, MongoDB, Caddy, Go Server) for fast, high-traffic URL shortening.',

			'Achieved an average of 18,931 requests per second with 4.88 ms average latency, handling large volumes of data at 23.72 MB/sec throughput per wrk.',

			'GitHub Actions pipeline for continuous integration and deployment.'
		],
		href: 'https://github.com/xdaybreakerx/SmallChop'
	},
	{
		heading: 'QuizQuokka Flash Card Web App',
		tech: ['React', 'TailwindCSS', 'ShadCN', 'Firebase'],
		description: [
			'Built a responsive flashcard app for practicing CS topics such as languages, and algorithms.',

			'Achieved 98 Performance, 93 Accessibility, and 100 Best Practices scores on Lighthouse, ensuring a fast and accessible user experience.',

			'Styled with TailwindCSS and ShadCN, deployed on Netlify with Firebase backend and auth, Firestore database, and serverless functions. Integrated AI explanations with Llama 3 via GroqCloud.'
		],
		href: 'https://github.com/xdaybreakerx/quizquokka'
	},
	{
		heading: 'Finance Management API',
		tech: ['Python', 'Flask', 'JWT', 'PostgreSQL'],
		description: [
			'Built a Flask-based API for secure CRUD operations, managing user accounts, transactions, and categorising expenses.',

			'Integrated PostgreSQL via Neon.tech for scalability and optimised database performance.',

			'Security focus with JWT-based authentication, input sanitisation, and error handling.'
		],
		href: 'https://github.com/xdaybreakerx/finance-management-api'
	}
]
---

<Section title='Projects'>
	{
		projects.map((project) => (
			<ProjectCard
				as='a'
				href={project.href}
				key={project.href}
				heading={project.heading}
				description={project.description}
				tech={project.tech}
			/>
		))
	}
</Section>
